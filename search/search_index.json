{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#gitlab-corpus","title":"GitLab-Corpus","text":"<p>This tool creates a corpus for accessible repositories in a GitLab instance.  The corpus will primarily contain information about software projects.</p> <p>Relevant information could be:  </p> <ul> <li>number of authors or commits</li> <li>merge requests</li> <li>programming languages used</li> <li>CI usage  </li> <li>\u2026</li> </ul> <p>The output corpus is in the JSON-format, as it is widely used and because of its compatibility with neo4j.</p>"},{"location":"#requirements","title":"Requirements","text":"<ul> <li>Git client &gt;= 2.1.0</li> <li>Python &gt;= 3.12 with pip and venv</li> <li>Optionally, a modern package manager (<code>uv</code> (recommended), <code>poetry</code>, or similar)</li> </ul>"},{"location":"#running-the-corpus-cli-tool","title":"Running the <code>corpus</code> CLI tool","text":"<p>If you use <code>uv</code>, all you need to do is clone this repository and run the <code>corpus</code> command:</p> <pre><code>git clone &lt;URL of this Git repository&gt; corpus\ncd corpus\nuv run corpus\n</code></pre> <p>Otherwise, you need to install the dependencies and package first:</p> <pre><code>git clone &lt;URL of this Git repository&gt; corpus\ncd corpus\npython -m venv .venv  # Create a virtual environment\nsource .venv/bin/activate  # Activate the environment\npip install .  # Install dependencies declared in pyproject.toml\ncorpus  # Run the corpus CLI, should display a help message\n</code></pre>"},{"location":"#usage","title":"Usage","text":"<ol> <li>Create a configuration file in <code>resources/gitlab.cfg</code> with information about the GitLab instance you want to run this tool on: </li> </ol> <pre><code>[global]\n# Sets the default GitLab instance\ndefault = gitlab-1\n# Whether SSL certificates should be validated.\n# If the value is a string, it is the path to a CA file used for certificate validation.\nssl_verify = true\n# Timeout for API requests\ntimeout = 15\n\n# A GitLab instance\n[gitlab-1]\n# The instance's base URL\nurl = https://gitlab.example.com\n# A user private token to authenticate with the GitLab API,\n# needs at least `read_api` privileges!\nprivate_token = 123abc\n# The version of the GitLab API to use (the python-gitlab package supports '4' only) \napi_version = 4\n</code></pre> <ol> <li>Run the corpus tool:</li> </ol> <pre><code>Usage: corpus [OPTIONS] COMMAND [ARGS]...\n\n  Entry point to the corpus cli.\n\nOptions:\n  -g, --gl-config TEXT     Path to the GitLab config file  [default: resources/gitlab.cfg]\n  -n, --neo4j-config TEXT  Path to the Neo4J config file  [default: resources/neo4j.cfg]\n  -s, --source TEXT        Name of the GitLab instance, you want to analyze, if not the default value of your configuration\n  -v, --verbose BOOLEAN    Prints more output during execution\n  --help                   Show this message and exit.\n\nCommands:\n  build    Run the pipeline extract -&gt; filter -&gt; export in one command.\n  export   Export a previously extracted (and maybe filtered) corpus to...\n  extract  Extract projects from the specified GitLab instance and write...\n  filter   Apply filters on a previously extracted corpus.\n</code></pre>"},{"location":"CONTRIBUTING/","title":"Contributing","text":"<p>When contributing to this repository, please first discuss the change you wish to make via issue before making a change.</p>"},{"location":"RELEASING/","title":"Releasing","text":"<p>In the <code>main</code> branch, after PRs have been merged:</p> <ol> <li>Update the changelog using <code>keepachangelog-manager</code><ul> <li><code>changelogmanager release</code> - Releases all unreleased changes in changelog</li> <li><code>git add CHANGELOG.md &amp;&amp; git commit -m \"Update changelog for version &lt;version&gt;\"</code></li> </ul> </li> <li>Bump version<ul> <li><code>uv bump &lt;major/minor/patch&gt;</code></li> </ul> </li> <li>Create version tag<ul> <li><code>git tag -a &lt;version&gt; -m \"&lt;version&gt;\"</code></li> </ul> </li> <li>Push changes and tags<ul> <li><code>git push --follow-tags</code></li> </ul> </li> </ol>"},{"location":"filter-specification/","title":"How to write a filter file","text":"<p>If you are looking for templates for filters, you can find them here: filter templates</p>"},{"location":"filter-specification/#sections-of-the-filter-file","title":"Sections of the filter file","text":"<p>The filter file is separated into two main sections: <code>filters</code> and <code>attributes</code>. A filter specifies if a project will be saved in the output corpus. The attributes specified in the attributes section define, which attributes of a project will be shown in the output corpus.</p> <p>The two sections are specified by writing:</p> <pre><code>filters:\n\nattributes:\n</code></pre> <p>Without any indentation.</p> <p>The example above is also the minimal required filter file, when using <code>corpus filter</code> or the <code>corpus build</code> pipeline.</p>"},{"location":"filter-specification/#how-to-write-a-filter","title":"How to write a filter","text":"<p>A filter can be written directly under the section title <code>filters:</code> with an indentation (I always use 4 spaces or tab). Make sure to be consistent with the indentation or your filter file might not be read.</p> <p>Any attribute a project has in a corpus, can be used as a filter option. To filter by an attribute, one has to define the operator and the value, that will be used in the evaluation.</p> <p>Here is a small example:</p> <pre><code>filters:\n    id:\n        operator: \"&lt;\"\n        value: 12345\n</code></pre> <p>As we are writing a filter, we start with the keyword <code>filters:</code>. In the next line, we write the attribute by which we want to filter the projects. Here it is <code>id:</code>. The next two lines are for <code>operator</code> and <code>value</code>. Any non-numeric values need to be surrounded by double quotes (\\\") or single quotes (\\').</p> <p>Attributes with a string value can also be filtered by using a regular expression, as shown in the following example:</p> <pre><code>filters:\n    name:\n        operator: \"regex\"\n        value: \".*machine\\slearning.*\"\n</code></pre> <p>Here we search for projects, which have the string \\'machine learning\\' in its name.</p>"},{"location":"filter-specification/#special-filter-option-languages","title":"Special filter option: languages","text":"<p>GitLab provides the languages used in a project through its API. We can use this, to create a corpus of projects which use specific languages only.</p> <p>Until now, there are four possible language filters:</p> <p>any_languages</p> <p>A project will only be added to the corpus, it is contains any of the languages defined here.</p> <p>atleast_languages</p> <p>A project will only be added to the corpus, if it contains at least the languages defined here.</p> <p>atmost_languages</p> <p>A project will only be added to the corpus, if it contains at most the languages defined here.</p> <p>exact_languages</p> <p>A project will only be added to the corpus, if it contains exactly the languages defined here.</p> <p>Some examples can be found in the section [Examples]{.title-ref}.</p>"},{"location":"filter-specification/#how-to-specify-the-attributes","title":"How to specify the attributes","text":"<p>Defining the attributes to be shown in the corpus is straight forward. Simply add the name of the attribute in a list in the next line after <code>attributes</code>, like so:</p> <pre><code>attributes:\n    - id\n    - name\n    - description\n    - web_url\n</code></pre>"},{"location":"filter-specification/#how-to-refer-to-a-filter-file","title":"How to refer to a filter file","text":"<p>A filter file is needed, if you either run the command <code>corpus build</code> or <code>corpus filter</code>. The default location for a filter file is <code>resources/filters.yaml</code> from your current directory.</p> <p>If you want to specify the location of the filter file manually, add the following to your command:</p> <pre><code>corpus build --filter-file=path/to/your/filter_file.yaml\n</code></pre> <p>or:</p> <pre><code>corpus filter --filter-file=path/to/your/filter_file.yaml\n</code></pre>"},{"location":"filter-specification/#examples","title":"Examples","text":"<p>Assume we want to create a corpus of the projects of our GitLab instance, which currently only has two projects:</p> <ol> <li> <p>Project 1, which has the following languages section:</p> <pre><code>\"C#\": 52.7,\n\"C++\": 43.14,\n\"C\": 4.16\n</code></pre> </li> <li> <p>Project 2, which has the following languages section:</p> <pre><code>\"HTML\": 51.0,\n\"Vue\": 9.0,\n\"JavaScript\": 40.0\n</code></pre> </li> </ol>"},{"location":"filter-specification/#examples-for-any_languages","title":"Examples for any_languages","text":"<p>We now want to filter out projects that have any of the languages C, C++ or Java. The filter for this would look like this:</p> <pre><code>filters:\n    any_languages:\n        C:\n            operator: \"&gt;=\"\n            value: 0.0\n        C++:\n            operator: \"&gt;=\"\n            value: 0.0\n        Java:\n            operator: \"&gt;=\"\n            value: 0.0\n</code></pre> <p>The resulting corpus would then contain Project 1 only. In the future it shall be necessary anymore, to write operator and value in this case.</p> <p>Now we want to filter more detailed, by projects which have the languages C, C++ or Java with at least 60%:</p> <pre><code>filters:\n    any_languages:\n        C:\n            operator: \"&gt;=\"\n            value: 60.0\n        C++:\n            operator: \"&gt;=\"\n            value: 60.0\n        Java:\n            operator: \"&gt;=\"\n            value: 60.0\n</code></pre> <p>The resulting corpus would not contain any of the two projects.</p>"},{"location":"filter-specification/#examples-for-atleast_languages","title":"Examples for atleast_languages","text":"<p>The following filter would only add Project 2 to the corpus, because Project 1 does not contain HTML or Vue:</p> <pre><code>filters:\n    atleast_languages:\n        HTML:\n            operator: \"&gt;\"\n            value: 0.0\n        Vue:\n            operator: \"&gt;\"\n            value: 0.0\n</code></pre> <p>Here we filter out projects, which contain at least Vue, but it should not make up more than 50% of the projects languages:</p> <pre><code>filters:\n    atleast_languages:\n        Vue:\n            operator: \"&lt;=\"\n            value: 50.0\n</code></pre> <p>The corpus would then contain Project 2.</p>"},{"location":"filter-specification/#examples-for-atmost_languages","title":"Examples for atmost_languages","text":"<p>We now want to filter out projects, which only contain the programming languages C and C++ and nothing more:</p> <pre><code>filters:\n    atmost_languages:\n        C:\n            operator: \"&gt;\"\n            value: 0.0\n        C++:\n            operator: \"&gt;\"\n            value: 0.0\n</code></pre> <p>None of the above projects would be added to the corpus.</p> <p>If we add C#, Python and ActionScript to the filters, Project 1 will be added to the corpus, because it contains C#, C++ and C:</p> <pre><code>filters:\n    atmost_languages:\n        C:\n            operator: \"&gt;\"\n            value: 0.0\n        C++:\n            operator: \"&gt;\"\n            value: 0.0\n        C#:\n            operator: \"&gt;\"\n            value: 0.0\n        Python:\n            operator: \"&gt;\"\n            value: 0.0\n        ActionScript:\n            operator: \"&gt;\"\n            value: 0.0\n</code></pre>"},{"location":"filter-specification/#examples-for-exact_languages","title":"Examples for exact_languages","text":"<p>We now want to filter out those projects, that contain exactly HTML, Vue and JavaScript with at least 30%:</p> <pre><code>filters:\n    exact_languages:\n        HTML:\n            operator: \"&gt;\"\n            value: 30.0\n        Vue:\n            operator: \"&gt;\"\n            value: 30.0\n        JavaScript:\n            operator: \"&gt;=\"\n            value: 30.0\n</code></pre> <p>The resulting corpus would contain Project 2 only.</p>"},{"location":"getting-started/","title":"Getting started","text":""},{"location":"getting-started/#requirements","title":"Requirements","text":"<ul> <li>Git client &gt;= 2.1.0</li> <li>Python &gt;= 3.12 with pip and venv</li> <li>Optionally, a modern package manager (<code>uv</code> (recommended), <code>poetry</code>, or similar)</li> </ul>"},{"location":"getting-started/#running-the-corpus-cli-tool","title":"Running the <code>corpus</code> CLI tool","text":"<p>If you use <code>uv</code>, all you need to do is clone this repository and run the <code>corpus</code> command:</p> <pre><code>git clone &lt;URL of this Git repository&gt; corpus\ncd corpus\nuv run corpus\n</code></pre> <p>Otherwise, you need to install the dependencies and package first:</p> <pre><code>git clone &lt;URL of this Git repository&gt; corpus\ncd corpus\npython -m venv .venv  # Create a virtual environment\nsource .venv/bin/activate  # Activate the environment\npip install .  # Install dependencies declared in pyproject.toml\ncorpus  # Run the corpus CLI, should display a help message\n</code></pre> <p>To view the help page, simply use <code>corpus</code> or <code>corpus --help</code></p>"},{"location":"getting-started/#basic-configuration","title":"Basic configuration","text":"<p>There are three files that are often needed to run <code>corpus</code>:</p> <ol> <li><code>gitlab.cfg</code> (mandatory)</li> <li><code>filters.yaml</code> (required when using <code>corpus filter</code> or <code>corpus build</code>)</li> <li><code>neo4j.cfg</code> (optional)</li> </ol> <p>Per default, <code>corpus</code> looks for these files in the <code>./resources/</code> directory. Locations of these files can also be passed to <code>corpus</code> commands as arguments.  </p>"},{"location":"getting-started/#gitlabcfg-configuration-of-the-gitlab-instance-to-work-with","title":"<code>gitlab.cfg</code> - configuration of the GitLab instance to work with","text":"<p>If you need help with the content of that configuration file, read the docs here: python-gitlab docs. It is a known bug, that sometimes the execution stops with the <code>ReadTimeout</code> error. Until now, there is no better solution, than setting the <code>timeout</code> value in the configuration file to a higher value.</p>"},{"location":"getting-started/#filteryaml-configure-the-filtering-stage-of-corpus-building","title":"<code>filter.yaml</code> - configure the filtering stage of corpus building","text":"<p>If you want to use the <code>corpus build</code> or <code>corpus filter</code> commands, you should specify a filter file. For more information on how to write a filter file read here: How to write a filter file.</p>"},{"location":"getting-started/#neo4jcfg-configure-the-neo4j-export-functionality","title":"<code>neo4j.cfg</code> - configure the Neo4J export functionality","text":"<p>To use the Neo4J export functionality you need to create a <code>neo4j.cfg</code> file. For more information on how to write the Neo4J-configuration file read here: How to write the Neo4J configuration.</p>"},{"location":"getting-started/#information","title":"Information","text":"<p>If you use <code>corpus build</code> or <code>corpus extract</code> with the parameter <code>--all-elements</code> it may take some time (especially pipelines that extract a huge number of projects and export them to Neo4J can take up to several hours). So I really recommend, that you do a <code>corpus extract --all-elements</code> only once. In the following you can then use <code>corpus filter --out=path/to/file.json</code>. This will prevent, that your previously extracted corpus will be overwritten, as you probably do not want to crawl all projects again everytime you try a new filter.</p> <p>You can find interesting templates for filters here: filter templates.</p>"},{"location":"neo4j-configuration/","title":"How to write the Neo4J configuration","text":"<p>The configuration file always start with the following line: <code>[NEO4J]</code>.</p> <p>After that, the file looks like this:</p> <pre><code>hostname = somehostname\nprotocol = http(s)/bolt\nport = 9999\nuser = username_for_your_db\npassword = pw_for_that_user\n</code></pre> <ul> <li>hostname: Hostname of your Neo4J-server (e.g. localhost or some     remote hostname)</li> <li>protocol: One of http, https or bolt</li> <li>port: 7474 is default for http(s), 7687 is default for bolt. You can     put a custom port here, but make sure your database is reachable     through that port</li> <li>user: username to access the db</li> <li>password: password for the specified user</li> </ul>"},{"location":"reference/","title":"API reference","text":""},{"location":"reference/#corpus.corpus.build","title":"<code>build(config, corpus_data, all_elements, filter_file, out, output_format, include_private)</code>","text":"<p>Run the pipeline extract -&gt; filter -&gt; export in one command.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> required <code>corpus_data</code> required <code>all_elements</code> required <code>filter_file</code> required <code>out</code> required <code>output_format</code> required <code>include_private</code> required Source code in <code>src/corpus/corpus.py</code> <pre><code>@cli.command()\n@click.option('--all-elements', '-a',\n              help='Get all elements available in the GitLab instance WARNING: This might take a long time and might '\n                   'cause problems for the server',\n              is_flag=True)\n@click.option('--filter-file', '-f',\n              help='File in yaml format which defines the filters to be used on the corpus',\n              default='resources/filters.yaml', show_default=True)\n@click.option('--out', '-o', default='out/corpus.json',\n              help='Specifies the output file', show_default=True)\n@click.option('--output-format', '-F', default='json',\n              help='Specifies the output format', show_default=True)\n@click.option('--include-private', '-p', is_flag=True,\n              help='If set, GitLab projects with visibility private will be included as well')\n@corpus\n@command_config\ndef build(config, corpus_data, all_elements, filter_file, out, output_format, include_private):\n    \"\"\"Run the pipeline extract -&gt; filter -&gt; export in one command.\n\n    :param config: \n    :param corpus_data: \n    :param all_elements: \n    :param filter_file: \n    :param out: \n    :param output_format: \n    :param include_private: \n\n    \"\"\"\n    extractor = Extractor(config.verbose, config.gl, corpus=corpus_data)\n    corpus_filter = Filter(config.verbose, corpus=corpus_data, from_file=False)\n\n    extractor.extract(all_elements=all_elements, include_private=include_private)\n    corpus_filter.load_filters(filter_file=filter_file)\n    corpus_filter.filter()\n\n    exporter = Exporter(config, corpus=corpus_filter.filtered_corpus, format_str=output_format, from_file=False)\n    exporter.export(out=out)\n</code></pre>"},{"location":"reference/#corpus.corpus.cli","title":"<code>cli(config, gl_config, neo4j_config, source, verbose)</code>","text":"<p>Entry point to the corpus cli.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> required <code>gl_config</code> required <code>neo4j_config</code> required <code>source</code> required <code>verbose</code> required Source code in <code>src/corpus/corpus.py</code> <pre><code>@click.group()\n@click.option('--gl-config', '-g', default='resources/gitlab.cfg',\n              help='Path to the GitLab config file', show_default=True)\n@click.option('--neo4j-config', '-n', default='resources/neo4j.cfg',\n              help='Path to the Neo4J config file', show_default=True)\n@click.option('--source', '-s',\n              help='Name of the GitLab instance, you want to analyze, if not the default value of your configuration')\n@click.option('--verbose', '-v', default=False,\n              help='Prints more output during execution')\n@command_config\ndef cli(config, gl_config, neo4j_config, source, verbose):\n    \"\"\"Entry point to the corpus cli.\n\n    :param config: \n    :param gl_config: \n    :param neo4j_config: \n    :param source: \n    :param verbose: \n\n    \"\"\"\n    config.gl = gitlab.Gitlab.from_config(source, [gl_config])\n    config.verbose = verbose\n    config.neo4j_config = load_neo4j_config(neo4j_config)\n</code></pre>"},{"location":"reference/#corpus.corpus.export","title":"<code>export(config, corpus_data, input_file, out, output_format)</code>","text":"<p>Export a previously extracted (and maybe filtered) corpus to another format.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> required <code>corpus_data</code> required <code>input_file</code> required <code>out</code> required <code>output_format</code> required Source code in <code>src/corpus/corpus.py</code> <pre><code>@cli.command()\n@click.option('--input-file', '-i', default='out/corpus.json',\n              help='Specifies the file to load the corpus from', show_default=True)\n@click.option('--out', '-o', default='out/corpus.json',\n              help='Specifies the output file', show_default=True)\n@click.option('--output-format', '-F', default='json',\n              help='Specifies the output format', show_default=True)\n@corpus\n@command_config\ndef export(config, corpus_data, input_file, out, output_format):\n    \"\"\"Export a previously extracted (and maybe filtered) corpus to another format.\n\n    :param config: \n    :param corpus_data: \n    :param input_file: \n    :param out: \n    :param output_format: \n\n    \"\"\"\n    exporter = Exporter(config, corpus=corpus_data, format_str=output_format, from_file=True, file=input_file)\n    exporter.export(out=out)\n</code></pre>"},{"location":"reference/#corpus.corpus.extract","title":"<code>extract(config, corpus_data, all_elements, out, include_private)</code>","text":"<p>Extract projects from the specified GitLab instance and write the output to a file.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> required <code>corpus_data</code> required <code>all_elements</code> required <code>out</code> required <code>include_private</code> required Source code in <code>src/corpus/corpus.py</code> <pre><code>@cli.command()\n@click.option('--all-elements', '-a',\n              help='Get all elements available in the GitLab instance WARNING: This might take a long time and might '\n                   'cause problems for the server',\n              is_flag=True)\n@click.option('--out', '-o', default='out/corpus.json',\n              help='Specifies the output file', show_default=True)\n@click.option('--include-private', '-p', is_flag=True,\n              help='If set, GitLab projects with visibility private will be included as well')\n@corpus\n@command_config\ndef extract(config, corpus_data, all_elements, out, include_private):\n    \"\"\"Extract projects from the specified GitLab instance and write the output to a file.\n\n    :param config: \n    :param corpus_data: \n    :param all_elements: \n    :param out: \n    :param include_private: \n\n    \"\"\"\n    extractor = Extractor(config.verbose, config.gl, corpus=corpus_data)\n    exporter = Exporter(config, corpus=corpus_data, format_str=\"json\")\n\n    extractor.extract(all_elements=all_elements, include_private=include_private)\n    exporter.export(out=out)\n</code></pre>"},{"location":"reference/#corpus.corpus.filter","title":"<code>filter(config, corpus_data, filter_file, input_file, out)</code>","text":"<p>Apply filters on a previously extracted corpus.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> required <code>corpus_data</code> required <code>filter_file</code> required <code>input_file</code> required <code>out</code> required Source code in <code>src/corpus/corpus.py</code> <pre><code>@cli.command()\n@click.option('--filter-file', '-f',\n              help='File in yaml format which defines the filters to be used on the corpus',\n              default='resources/filters.yaml', show_default=True)\n@click.option('--input-file', '-i', default='out/corpus.json',\n              help='Specifies the file to load the corpus from', show_default=True)\n@click.option('--out', '-o', default='out/corpus.json',\n              help='Specifies the output file', show_default=True)\n@corpus\n@command_config\ndef filter(config, corpus_data, filter_file, input_file, out):\n    \"\"\"Apply filters on a previously extracted corpus.\n\n    :param config: \n    :param corpus_data: \n    :param filter_file: \n    :param input_file: \n    :param out: \n\n    \"\"\"\n    corpus_filter = Filter(config.verbose, corpus=corpus_data, from_file=True, file=input_file)\n\n    corpus_filter.load_filters(filter_file=filter_file)\n    corpus_filter.filter()\n\n    exporter = Exporter(config, corpus=corpus_filter.filtered_corpus, format_str=\"json\")\n    exporter.export(out=out)\n</code></pre>"}]}